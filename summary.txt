21/01/14 재수강

nvm 설치 및 에러제거
nvm 설치 에러: 에러나서 node지우고 c/users/appdata/roaming/에 npm관련된거 다 지웠다.
nvm windows install 설치 파일 받아서 설치
nvm으로 다시 node 10.16.3설치

npm i로 vue-til-server에 있는 서버 실행

eslint 설정파일 건드리기
eslint: javascript 문법 자동검사기

prettier: 코딩 포맷을 정하는 것 (semicolumn이나 indent등등)
.prettierrc 파일을 최상위에 만들어서 prettier설정을 할 수 있다.
하지만 prettier설정과 eslint의 rule이 충돌이 되므로 되도록 eslint가 우선시 되게 eslint안에 prettier rule을 적용해준다.

프로젝트 소스 레벨에서 관리하면 어떤 에디터를 쓰던 공통적으로 eslint와 prettier관리가 될 수 있다.v

Routing 설정

Code Spliting
SPA(Single Page Application)기반에 사이트는 사이트 접속시 페이지 20개면 20개 30개면 30개 다 처음 로딩 될 때 불러온다.
페이지가 많을 수록 오랜시간이 걸림으로 code Spliting을 이용해 Login Page에서는 Login만 Signup페이지에서는 Signup페이지만 불러오게 할 예정이다.
routes/index.js에서 component부분을 최상단에서 import가 아닌 클릭 했을때 들고오게 아래처럼 만들어준다.
      path: '/login',
      // component에 function으로 import로 들고오면 해당 페이지에 들어갈 때 해당파일을 자원을 들고 올수 있다.
      component: () => import('@/views/LoginPage.vue'),

routing redirect 설정
뒤에 인자 전달없이 URL접속 시 default로 보여줄 화면을 정한다.
routes안에 이렇게 설정해주면 접속시 바로 login페이지로 연결된다.
    {
      path: '/',
      redirect: '/login',
    },

routing callback 설정
지정해놓은 페이지가 아닌 다른 URL로 접속했을때 보여주는 페이지
    {
      // 위에 지정해놓은 페이지가 아닌 URL로 연결 되었을 때 보여줄 페이지
      path: '*',
      component: () => import('@/views/NotFoundPage.vue'),
    },

routing history mode
vue-router의 기본 설정은 hash 모드입니다. URL 해시를 사용하기 때문에 URL이 변경될 때 페이지가 다시 로드되지 않습니다.
해시를 제거하기 위해 vue-router는 history 모드도 지원합니다.
history mode를 적용했을 때 바로 해당 주소를 직접 사용자가 입력하여 접속하려한다면 뜨게 되는 404 오류가 뜬다.
Vue에서는 기본적으로 url 직접 접근이 불가능하다. 그 이유는 vue는 싱글 페이지 클라이언트 앱이기 때문이다. 
Vue Router는 프론트의 요청에 따라 새로운 돔을 변경하는 것이 아닌, 브라우저에 변화가 있는 부분만 돔을 변경한다. 
그러니깐 실제적인 페이지에 서버가 할당되지 않았는데 해당링크를 직접 작성하여 접속하니 생기는 문제인것이다. 
그래서 vue는 기본적으로 포괄적으로 뜰 수 있는 404 오류페이지를 설정할 것을 권장한다. 
mode에 history mode 설정

SignupPage 
components/SignupForm.vue를 만들어 import한다.

AJAX(Asynchronous Javascript And Xml)
Ajax를 한마디로 정의하자면 JavaScript를 사용한 비동기 통신, 클라이언트와 서버간에 XML 데이터를 주고받는 기술이라고 할 수 있겠습니다.
비동기 방식은 웹페이지를 리로드하지 않고 데이터를 불러오는 방식입니다. 
이 방식의 장점은 페이지 리로드의 경우 전체 리소스를 다시 불러와야하는데 이미지, 스크립트 , 기타 코드등을 모두 재요청할 경우 불필요한 리소스 낭비가 발생하게 되지만 비동기식 방식을 이용할 경우 필요한 부분만 불러와 사용할 수 있으므로 매우 큰 장점이 있습니다.
기본적으로 HTTP프로토콜은 클라이언트쪽에서 Request를 보내고 Server쪽에서 Response를 받으면 이어졌던 연결이 끊기게 되어있습니다. 
그래서 화면의 내용을 갱신하기 위해서는 다시 request를 하고 response를 하면서 페이지 전체를 갱신하게 됩니다. 
하지만 이렇게 할 경우 페이지의 일부분만 갱신할 경우에도 페이지 전체를 다시 로드해야하는데 엄청난 자원낭비와 시간낭비를 초래하고 말것입니다. 
하지만 ajax는 html 페이지 전체가아닌 일부분만 갱신할수 있도록 XML HttpRequest객체를 통해 서버에 request를 합니다. 
이 경우 Json이나 xml형태로 필요한 데이터만 받아 갱신하기 때문에 그만큼의 자원과 시간을 아낄 수 있습니다.

Axios 설치 및 연결
axios는 HTTP 클라이언트 라이브러리로써, 비동기 방식으로 HTTP 데이터 요청을 실행합니다.
내부적으로 AXIOS는 직접적으로 XMLHttpRequest 를 다루지 않고 “AJAX 호출”을 할 수 있습니다.
설치 후 import해서 바로 post요청을 할 수 있으나 api구조를 잘 하기위해 api폴더생성하고 index.js에서 필요한 요청들을 setting 해놓고 쓰는 것이 좋다.

api/index.js function만들기
SignupForm에서 들어오는 userdata를 axios이용해 서버에 보내는 function만든다.
registerUser function에 인자로 userData를 받아 URL을 지정해 return (axios.post(url, userData))한다.

async submitForm function
signupForm.vue에서 async submitForm function만든다.
userData를 담아 registerUser function을 api/index.js에서 import해서 await registerUser(userData);으로 response를 받는다.
response를 받아 post기능이 성공되면 회원이름과 함께 회원가입이 완료 되었다고 msg를 띄운다.

axios create
axios.crate를 이용해 기본 옵션들을 설정할 수 있다.
거의 백앤드 서버에 접속하는 URL은 하나로 지정해서 하기 떄문에 baseURL값으로 집어 넣는다.
그럼 post할 떄 axios.post(URL,data)대신 instance.post(data)로 post요청을 할 수 있다.

환경변수 설정 .env
프로젝트 폴더 최상단인 root에 .env파일을 만든다.
환경변수를 등록하는 파일
VUE_APP_ 시작으로 변수가 시작하면 vue에서 자동로드 된다.
.env파일에서 아래와 같이 등록하고
VUE_APP_API_URL = http://localhost:3000/
다른 파일에서 가져다 쓸 때는 아래와 같이 쓰면 된다.
process.env.VUE_APP_API_URL
.env.development
개발용(test: npm run serve)으로 local에서 테스트용으로 쓸 때 사용할 변수들을 지정하면 된다.
.env보다 우선순위를 가진다.
.env.production
배포(production: npm run build)할 때 쓸 변수들을 저장
위와 같이 API_URL은 개발할 때 쓰는 주소와 배포 할 때 쓰는 주소가 다르므로 development, production각각 정의한다.
.env보다 우선순위를 가진다.
.env
개발할 때와 배포할 때 상관없이 공통으로 써야 될 환경변수들을 .env파일에 정의한다.
